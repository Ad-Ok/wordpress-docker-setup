#!/bin/bash
# üóÑÔ∏è Database Migration Manager
# –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

set -e

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
source "${SCRIPT_DIR}/config.sh"

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
MIGRATIONS_DIR="${SCRIPT_DIR}/database/migrations"
APPLIED_LOG="${MIGRATIONS_DIR}/.applied.json"

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

# ============================================
# –§–£–ù–ö–¶–ò–ò
# ============================================

# –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
show_usage() {
    cat << EOF
${BLUE}üóÑÔ∏è Database Migration Manager${NC}

${YELLOW}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:${NC}
  ./db-migrate.sh <command> [environment] [options]

${YELLOW}–ö–æ–º–∞–Ω–¥—ã:${NC}
  ${GREEN}apply${NC} <env>         –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
  ${GREEN}status${NC} <env>        –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π
  ${GREEN}list${NC}                –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏

${YELLOW}–û–∫—Ä—É–∂–µ–Ω–∏—è:${NC}
  ${CYAN}local${NC}  - –õ–æ–∫–∞–ª—å–Ω–∞—è –ë–î (Docker)
  ${CYAN}dev${NC}    - Development —Å–µ—Ä–≤–µ—Ä
  ${CYAN}prod${NC}   - Production —Å–µ—Ä–≤–µ—Ä

${YELLOW}–ü—Ä–∏–º–µ—Ä—ã:${NC}
  # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
  ./db-migrate.sh apply local

  # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ DEV
  ./db-migrate.sh apply dev

  # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ PROD
  ./db-migrate.sh apply prod

  # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
  ./db-migrate.sh status local

  # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏
  ./db-migrate.sh list

${YELLOW}–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏:${NC}
  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ${CYAN}./db-create-migration.sh "–æ–ø–∏—Å–∞–Ω–∏–µ"${NC}

${YELLOW}–§–æ—Ä–º–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏:${NC}
  001_description.sql  - –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
  –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤ –ø–æ—Ä—è–¥–∫–µ –Ω–æ–º–µ—Ä–æ–≤

${YELLOW}–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:${NC}
  –ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤: ${MIGRATIONS_DIR}/.applied.json

EOF
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
init_applied_log() {
    if [ ! -f "$APPLIED_LOG" ]; then
        echo '{"migrations": []}' > "$APPLIED_LOG"
    fi
}

# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π
get_all_migrations() {
    find "${MIGRATIONS_DIR}" -name "[0-9][0-9][0-9]_*.sql" 2>/dev/null | sort || true
}

# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
get_applied_migrations() {
    local environment="$1"
    init_applied_log
    
    jq -r --arg env "$environment" \
        '.migrations[] | select(.environment == $env) | .file' \
        "$APPLIED_LOG" 2>/dev/null || true
}

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è
is_migration_applied() {
    local migration_file="$1"
    local environment="$2"
    
    local applied=$(get_applied_migrations "$environment")
    echo "$applied" | grep -q "^${migration_file}$"
}

# –û—Ç–º–µ—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—É—é
mark_migration_applied() {
    local migration_file="$1"
    local environment="$2"
    
    init_applied_log
    
    local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
    local temp_file=$(mktemp)
    
    jq --arg file "$migration_file" \
       --arg env "$environment" \
       --arg ts "$timestamp" \
       '.migrations += [{
           "file": $file,
           "environment": $env,
           "applied_at": $ts
       }]' "$APPLIED_LOG" > "$temp_file"
    
    mv "$temp_file" "$APPLIED_LOG"
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π
list_migrations() {
    echo -e "${BLUE}üìã –°–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π:${NC}\n"
    
    local migrations=$(get_all_migrations)
    
    if [ -z "$migrations" ]; then
        echo -e "${YELLOW}–ù–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–π –≤ ${MIGRATIONS_DIR}${NC}"
        echo -e "\n–°–æ–∑–¥–∞–π—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é: ${CYAN}./db-create-migration.sh \"–æ–ø–∏—Å–∞–Ω–∏–µ\"${NC}"
        return 0
    fi
    
    echo "$migrations" | while read -r migration_path; do
        local migration_file=$(basename "$migration_path")
        local migration_number=$(echo "$migration_file" | cut -d'_' -f1)
        local migration_desc=$(echo "$migration_file" | sed 's/^[0-9]*_//;s/.sql$//' | tr '_' ' ')
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö
        local status_local=" "
        local status_dev=" "
        local status_prod=" "
        
        if is_migration_applied "$migration_file" "local" 2>/dev/null; then
            status_local="${GREEN}‚úì${NC}"
        fi
        if is_migration_applied "$migration_file" "dev" 2>/dev/null; then
            status_dev="${GREEN}‚úì${NC}"
        fi
        if is_migration_applied "$migration_file" "prod" 2>/dev/null; then
            status_prod="${GREEN}‚úì${NC}"
        fi
        
        echo -e "${CYAN}${migration_number}${NC} ${migration_desc}"
        echo -e "   ${BLUE}‚îú‚îÄ${NC} Local: [${status_local}]  Dev: [${status_dev}]  Prod: [${status_prod}]"
        echo -e "   ${BLUE}‚îî‚îÄ${NC} –§–∞–π–ª: ${migration_file}"
        echo ""
    done
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
show_status() {
    local environment="$1"
    
    if [ -z "$environment" ]; then
        echo -e "${RED}‚úó –£–∫–∞–∂–∏—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: local, dev –∏–ª–∏ prod${NC}"
        exit 1
    fi
    
    echo -e "${BLUE}üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è: ${CYAN}${environment}${NC}\n"
    
    local all_migrations=$(get_all_migrations)
    local applied_migrations=$(get_applied_migrations "$environment")
    
    if [ -z "$all_migrations" ]; then
        echo -e "${YELLOW}–ù–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–π${NC}"
        return 0
    fi
    
    local pending_count=0
    local applied_count=0
    
    echo "$all_migrations" | while read -r migration_path; do
        local migration_file=$(basename "$migration_path")
        
        if echo "$applied_migrations" | grep -q "^${migration_file}$"; then
            echo -e "   ${GREEN}‚úì${NC} ${migration_file}"
            applied_count=$((applied_count + 1))
        else
            echo -e "   ${YELLOW}‚óã${NC} ${migration_file} ${YELLOW}(–Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞)${NC}"
            pending_count=$((pending_count + 1))
        fi
    done
    
    local total=$(echo "$all_migrations" | wc -l | tr -d ' ')
    local applied=$(echo "$applied_migrations" | wc -l | tr -d ' ')
    local pending=$((total - applied))
    
    echo ""
    echo -e "${CYAN}–ò—Ç–æ–≥–æ:${NC} $total –º–∏–≥—Ä–∞—Ü–∏–π"
    echo -e "  ${GREEN}‚úì${NC} –ü—Ä–∏–º–µ–Ω–µ–Ω–æ: $applied"
    echo -e "  ${YELLOW}‚óã${NC} –û–∂–∏–¥–∞–µ—Ç: $pending"
}

# –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –ª–æ–∫–∞–ª—å–Ω–æ (Docker)
apply_migration_local() {
    local migration_file="$1"
    local migration_path="${MIGRATIONS_DIR}/${migration_file}"
    
    if [ ! -f "$migration_path" ]; then
        echo -e "${RED}‚úó –§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $migration_path${NC}"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Docker
    if ! docker ps | grep -q "${LOCAL_DB_CONTAINER}"; then
        echo -e "${RED}‚úó Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä '${LOCAL_DB_CONTAINER}' –Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"
        return 1
    fi
    
    echo -e "${CYAN}‚Üí –ü—Ä–∏–º–µ–Ω—è—é –º–∏–≥—Ä–∞—Ü–∏—é: ${migration_file}${NC}"
    
    # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é
    docker exec -i "${LOCAL_DB_CONTAINER}" \
        mysql \
        -u"${LOCAL_DB_USER}" \
        -p"${LOCAL_DB_PASS}" \
        "${LOCAL_DB_NAME}" \
        < "$migration_path" 2>&1 | sed 's/^/   /'
    
    if [ ${PIPESTATUS[0]} -eq 0 ]; then
        echo -e "   ${GREEN}‚úì${NC} –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞"
        mark_migration_applied "$migration_file" "local"
        return 0
    else
        echo -e "   ${RED}‚úó${NC} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏"
        return 1
    fi
}

# –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
apply_migration_remote() {
    local migration_file="$1"
    local environment="$2"
    local migration_path="${MIGRATIONS_DIR}/${migration_file}"
    
    if [ ! -f "$migration_path" ]; then
        echo -e "${RED}‚úó –§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $migration_path${NC}"
        return 1
    fi
    
    # –í—ã–±—Ä–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è
    case "$environment" in
        dev)
            SSH_USER="$DEV_SSH_USER"
            SSH_HOST="$DEV_SSH_HOST"
            REMOTE_WP_PATH="$DEV_WP_PATH"
            DB_NAME="$DEV_DB_NAME"
            DB_USER="$DEV_DB_USER"
            DB_PASS="$DEV_DB_PASS"
            ;;
        prod)
            SSH_USER="$PROD_SSH_USER"
            SSH_HOST="$PROD_SSH_HOST"
            REMOTE_WP_PATH="$PROD_WP_PATH"
            DB_NAME="$PROD_DB_NAME"
            DB_USER="$PROD_DB_USER"
            DB_PASS="$PROD_DB_PASS"
            ;;
    esac
    
    echo -e "${CYAN}‚Üí –ü—Ä–∏–º–µ–Ω—è—é –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞ ${environment}: ${migration_file}${NC}"
    
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é
    cat "$migration_path" | ssh "${SSH_USER}@${SSH_HOST}" \
        "mysql -u${DB_USER} -p${DB_PASS} ${DB_NAME}" 2>&1 | sed 's/^/   /'
    
    if [ ${PIPESTATUS[1]} -eq 0 ]; then
        echo -e "   ${GREEN}‚úì${NC} –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${environment}"
        mark_migration_applied "$migration_file" "$environment"
        return 0
    else
        echo -e "   ${RED}‚úó${NC} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ ${environment}"
        return 1
    fi
}

# –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
apply_migrations() {
    local environment="$1"
    
    if [ -z "$environment" ]; then
        echo -e "${RED}‚úó –£–∫–∞–∂–∏—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: local, dev –∏–ª–∏ prod${NC}"
        exit 1
    fi
    
    echo -e "${BLUE}üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞: ${CYAN}${environment}${NC}\n"
    
    # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π
    local all_migrations=$(get_all_migrations)
    
    if [ -z "$all_migrations" ]; then
        echo -e "${YELLOW}–ù–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è${NC}"
        return 0
    fi
    
    local applied_migrations=$(get_applied_migrations "$environment")
    local pending_migrations=""
    
    # –ù–∞–π—Ç–∏ –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    echo "$all_migrations" | while read -r migration_path; do
        local migration_file=$(basename "$migration_path")
        
        if ! echo "$applied_migrations" | grep -q "^${migration_file}$"; then
            echo "$migration_file"
        fi
    done > /tmp/pending_migrations_$$
    
    pending_migrations=$(cat /tmp/pending_migrations_$$)
    rm -f /tmp/pending_migrations_$$
    
    if [ -z "$pending_migrations" ]; then
        echo -e "${GREEN}‚úì –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã${NC}"
        return 0
    fi
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    echo -e "${YELLOW}–ú–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:${NC}"
    echo "$pending_migrations" | while read -r migration_file; do
        echo -e "   ${CYAN}‚Ä¢${NC} $migration_file"
    done
    echo ""
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è PROD
    if [ "$environment" == "prod" ]; then
        echo -e "${RED}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞ –ü–†–û–î–ê–ö–®–ï–ù–ï!${NC}"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): " confirm
        
        if [ "$confirm" != "yes" ]; then
            echo -e "${YELLOW}–û—Ç–º–µ–Ω–µ–Ω–æ${NC}"
            exit 0
        fi
    fi
    
    # –°–æ–∑–¥–∞—Ç—å backup –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º
    if [ "$environment" == "local" ]; then
        echo -e "${CYAN}‚Üí –°–æ–∑–¥–∞—é snapshot –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π...${NC}"
        "${SCRIPT_DIR}/database/db-snapshot.sh" create "before-migration" > /dev/null 2>&1
        echo -e "   ${GREEN}‚úì${NC} Snapshot —Å–æ–∑–¥–∞–Ω\n"
    else
        echo -e "${CYAN}‚Üí –°–æ–∑–¥–∞—é backup –Ω–∞ ${environment}...${NC}"
        "${SCRIPT_DIR}/utils/backup.sh" "$environment" > /dev/null 2>&1
        echo -e "   ${GREEN}‚úì${NC} Backup —Å–æ–∑–¥–∞–Ω\n"
    fi
    
    # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
    local success_count=0
    local fail_count=0
    
    echo "$pending_migrations" | while read -r migration_file; do
        if [ "$environment" == "local" ]; then
            if apply_migration_local "$migration_file"; then
                success_count=$((success_count + 1))
            else
                fail_count=$((fail_count + 1))
                break
            fi
        else
            if apply_migration_remote "$migration_file" "$environment"; then
                success_count=$((success_count + 1))
            else
                fail_count=$((fail_count + 1))
                break
            fi
        fi
        echo ""
    done
    
    # –ò—Ç–æ–≥–∏
    echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    
    local pending_count=$(echo "$pending_migrations" | wc -l | tr -d ' ')
    
    if [ $fail_count -eq 0 ]; then
        echo -e "${GREEN}‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!${NC}"
        echo -e "   –ü—Ä–∏–º–µ–Ω–µ–Ω–æ: ${pending_count}"
    else
        echo -e "${RED}‚ùå –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏${NC}"
        echo -e "   –£—Å–ø–µ—à–Ω–æ: ${success_count}"
        echo -e "   –û—à–∏–±–æ–∫: ${fail_count}"
        echo ""
        echo -e "${YELLOW}–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:${NC}"
        echo -e "   1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É –≤ –º–∏–≥—Ä–∞—Ü–∏–∏"
        echo -e "   2. –û—Ç–∫–∞—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"
        if [ "$environment" == "local" ]; then
            echo -e "   3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ snapshot: ${CYAN}./db-snapshot.sh restore latest${NC}"
        else
            echo -e "   3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ backup: ${CYAN}./rollback.sh${NC}"
        fi
    fi
}

# ============================================
# MAIN
# ============================================

COMMAND="$1"
ENVIRONMENT="$2"

case "$COMMAND" in
    apply)
        apply_migrations "$ENVIRONMENT"
        ;;
    status)
        show_status "$ENVIRONMENT"
        ;;
    list)
        list_migrations
        ;;
    help|--help|-h)
        show_usage
        ;;
    *)
        show_usage
        exit 1
        ;;
esac
