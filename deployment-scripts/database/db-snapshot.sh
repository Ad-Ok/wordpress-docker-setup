#!/bin/bash
# üì∏ Database Snapshot Manager
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–Ω–∞–ø—à–æ—Ç–∞–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ç–æ–∫

set -e

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
source "${SCRIPT_DIR}/config.sh"

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# ============================================
# –§–£–ù–ö–¶–ò–ò
# ============================================

# –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
show_usage() {
    cat << EOF
${BLUE}üì∏ Database Snapshot Manager${NC}

${YELLOW}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:${NC}
  ./db-snapshot.sh <command> [options]

${YELLOW}–ö–æ–º–∞–Ω–¥—ã:${NC}
  ${GREEN}create${NC} [description]     –°–æ–∑–¥–∞—Ç—å snapshot —Ç–µ–∫—É—â–µ–π –ë–î
  ${GREEN}list${NC}                     –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ snapshots
  ${GREEN}restore${NC} <snapshot>       –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å snapshot
  ${GREEN}cleanup${NC}                  –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ snapshots
  ${GREEN}auto-save${NC}                –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏
  ${GREEN}auto-restore${NC}             –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏

${YELLOW}–ü—Ä–∏–º–µ—Ä—ã:${NC}
  # –°–æ–∑–¥–∞—Ç—å snapshot —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
  ./db-snapshot.sh create "before migration"

  # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ snapshots
  ./db-snapshot.sh list

  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π snapshot
  ./db-snapshot.sh restore main_20251029_153022

  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π snapshot –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏
  ./db-snapshot.sh restore latest

  # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ snapshots
  ./db-snapshot.sh cleanup

${YELLOW}–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (—á–µ—Ä–µ–∑ Git hook):${NC}
  ./db-snapshot.sh auto-save      # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ë–î —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏
  ./db-snapshot.sh auto-restore   # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î –Ω–æ–≤–æ–π –≤–µ—Ç–∫–∏

EOF
}

# –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É Git
get_current_branch() {
    git -C "${LOCAL_PROJECT_ROOT}" rev-parse --abbrev-ref HEAD 2>/dev/null || echo "unknown"
}

# –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–º—è –≤–µ—Ç–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
normalize_branch_name() {
    echo "$1" | sed 's/[^a-zA-Z0-9_-]/_/g'
}

# –°–æ–∑–¥–∞—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ snapshot
create_snapshot_filename() {
    local branch="$1"
    local description="$2"
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local normalized_branch=$(normalize_branch_name "$branch")
    
    if [ -n "$description" ]; then
        local normalized_desc=$(normalize_branch_name "$description")
        echo "${normalized_branch}_${timestamp}_${normalized_desc}.sql.gz"
    else
        echo "${normalized_branch}_${timestamp}.sql.gz"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø—É—â–µ–Ω –ª–∏ Docker
check_docker() {
    if ! docker ps &> /dev/null; then
        echo -e "${RED}‚úó Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"
        echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä MySQL
check_mysql_container() {
    if ! docker ps -a --format '{{.Names}}' | grep -q "^${LOCAL_DB_CONTAINER}$"; then
        echo -e "${RED}‚úó MySQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä '${LOCAL_DB_CONTAINER}' –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker compose up -d"
        exit 1
    fi
    
    if ! docker ps --format '{{.Names}}' | grep -q "^${LOCAL_DB_CONTAINER}$"; then
        echo -e "${YELLOW}‚ö†Ô∏è  MySQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å–∫–∞—é...${NC}"
        docker start "${LOCAL_DB_CONTAINER}"
        sleep 3
    fi
}

# –°–æ–∑–¥–∞—Ç—å snapshot
create_snapshot() {
    local description="$1"
    local current_branch=$(get_current_branch)
    
    echo -e "${BLUE}üì∏ –°–æ–∑–¥–∞–Ω–∏–µ snapshot –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...${NC}"
    echo -e "   –í–µ—Ç–∫–∞: ${GREEN}${current_branch}${NC}"
    
    check_docker
    check_mysql_container
    
    # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è snapshots
    mkdir -p "${LOCAL_SNAPSHOT_DIR}"
    
    # –°–æ–∑–¥–∞—Ç—å –∏–º—è —Ñ–∞–π–ª–∞
    local snapshot_file=$(create_snapshot_filename "$current_branch" "$description")
    local snapshot_path="${LOCAL_SNAPSHOT_DIR}/${snapshot_file}"
    
    echo -e "   –§–∞–π–ª: ${snapshot_file}"
    
    # –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    echo -e "\n${CYAN}‚Üí –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...${NC}"
    
    docker exec "${LOCAL_DB_CONTAINER}" \
        mysqldump \
        -u"${LOCAL_DB_USER}" \
        -p"${LOCAL_DB_PASS}" \
        "${LOCAL_DB_NAME}" \
        2>/dev/null | gzip > "${snapshot_path}"
    
    if [ $? -eq 0 ]; then
        local size=$(du -h "${snapshot_path}" | cut -f1)
        echo -e "${GREEN}‚úì Snapshot —Å–æ–∑–¥–∞–Ω: ${snapshot_file} (${size})${NC}"
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        save_snapshot_metadata "$snapshot_file" "$current_branch" "$description"
        
        # –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ snapshots –¥–ª—è —ç—Ç–æ–π –≤–µ—Ç–∫–∏
        cleanup_old_snapshots "$current_branch"
        
        return 0
    else
        echo -e "${RED}‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ snapshot${NC}"
        rm -f "${snapshot_path}"
        return 1
    fi
}

# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ snapshot
save_snapshot_metadata() {
    local snapshot_file="$1"
    local branch="$2"
    local description="$3"
    local metadata_file="${LOCAL_SNAPSHOT_DIR}/.metadata.json"
    
    # –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    if [ ! -f "$metadata_file" ]; then
        echo "[]" > "$metadata_file"
    fi
    
    # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
    local temp_file=$(mktemp)
    
    jq --arg file "$snapshot_file" \
       --arg branch "$branch" \
       --arg desc "$description" \
       --arg ts "$timestamp" \
       '. += [{
           "file": $file,
           "branch": $branch,
           "description": $desc,
           "created_at": $ts
       }]' "$metadata_file" > "$temp_file"
    
    mv "$temp_file" "$metadata_file"
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ snapshots
list_snapshots() {
    echo -e "${BLUE}üìã –°–ø–∏—Å–æ–∫ snapshots:${NC}\n"
    
    if [ ! -d "${LOCAL_SNAPSHOT_DIR}" ] || [ -z "$(ls -A ${LOCAL_SNAPSHOT_DIR}/*.sql.gz 2>/dev/null)" ]; then
        echo -e "${YELLOW}–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö snapshots${NC}"
        return 0
    fi
    
    local metadata_file="${LOCAL_SNAPSHOT_DIR}/.metadata.json"
    local current_branch=$(get_current_branch)
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–µ—Ç–∫–∞–º
    local branches=($(ls "${LOCAL_SNAPSHOT_DIR}"/*.sql.gz 2>/dev/null | xargs -n 1 basename | cut -d'_' -f1 | sort -u))
    
    for branch in "${branches[@]}"; do
        if [ "$branch" == "$current_branch" ]; then
            echo -e "${GREEN}‚ñ†${NC} ${CYAN}${branch}${NC} ${YELLOW}(—Ç–µ–∫—É—â–∞—è)${NC}"
        else
            echo -e "${MAGENTA}‚ñ†${NC} ${branch}"
        fi
        
        # –ü–æ–∫–∞–∑–∞—Ç—å snapshots –¥–ª—è —ç—Ç–æ–π –≤–µ—Ç–∫–∏
        ls -t "${LOCAL_SNAPSHOT_DIR}/${branch}"_*.sql.gz 2>/dev/null | while read -r snapshot_path; do
            local snapshot_file=$(basename "$snapshot_path")
            local size=$(du -h "$snapshot_path" | cut -f1)
            local date=$(echo "$snapshot_file" | cut -d'_' -f2-3 | sed 's/_/ /')
            local description=""
            
            # –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            if [ -f "$metadata_file" ]; then
                description=$(jq -r --arg file "$snapshot_file" \
                    '.[] | select(.file == $file) | .description' "$metadata_file" 2>/dev/null)
            fi
            
            if [ -n "$description" ] && [ "$description" != "null" ]; then
                echo -e "  ${BLUE}‚îú‚îÄ${NC} ${snapshot_file%.*.*} (${size}) - ${description}"
            else
                echo -e "  ${BLUE}‚îú‚îÄ${NC} ${snapshot_file%.*.*} (${size})"
            fi
        done
        echo ""
    done
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å snapshot
restore_snapshot() {
    local snapshot_name="$1"
    
    if [ -z "$snapshot_name" ]; then
        echo -e "${RED}‚úó –£–∫–∞–∂–∏—Ç–µ –∏–º—è snapshot${NC}"
        echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./db-snapshot.sh list"
        exit 1
    fi
    
    check_docker
    check_mysql_container
    
    local snapshot_file=""
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ "latest" - –≤–∑—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏
    if [ "$snapshot_name" == "latest" ]; then
        local current_branch=$(get_current_branch)
        local normalized_branch=$(normalize_branch_name "$current_branch")
        snapshot_file=$(ls -t "${LOCAL_SNAPSHOT_DIR}/${normalized_branch}"_*.sql.gz 2>/dev/null | head -n 1)
        
        if [ -z "$snapshot_file" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ—Ç snapshots –¥–ª—è –≤–µ—Ç–∫–∏ ${current_branch}${NC}"
            echo -e "–î–æ—Å—Ç—É–ø–Ω—ã–µ snapshots:"
            list_snapshots
            exit 1
        fi
    else
        # –ù–∞–π—Ç–∏ —Ñ–∞–π–ª snapshot
        if [ -f "${LOCAL_SNAPSHOT_DIR}/${snapshot_name}.sql.gz" ]; then
            snapshot_file="${LOCAL_SNAPSHOT_DIR}/${snapshot_name}.sql.gz"
        elif [ -f "${LOCAL_SNAPSHOT_DIR}/${snapshot_name}" ]; then
            snapshot_file="${LOCAL_SNAPSHOT_DIR}/${snapshot_name}"
        else
            echo -e "${RED}‚úó Snapshot –Ω–µ –Ω–∞–π–¥–µ–Ω: ${snapshot_name}${NC}"
            echo -e "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ snapshots:"
            list_snapshots
            exit 1
        fi
    fi
    
    local snapshot_basename=$(basename "$snapshot_file" .sql.gz)
    
    echo -e "${BLUE}üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ snapshot...${NC}"
    echo -e "   –§–∞–π–ª: ${GREEN}${snapshot_basename}${NC}"
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    echo -e "\n${YELLOW}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –ó–ê–ú–ï–ù–ï–ù–ê!${NC}"
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): " confirm
    
    if [ "$confirm" != "yes" ]; then
        echo -e "${YELLOW}–û—Ç–º–µ–Ω–µ–Ω–æ${NC}"
        exit 0
    fi
    
    # –°–æ–∑–¥–∞—Ç—å backup —Ç–µ–∫—É—â–µ–π –ë–î –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    echo -e "\n${CYAN}‚Üí –°–æ–∑–¥–∞—é backup —Ç–µ–∫—É—â–µ–π –ë–î –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π...${NC}"
    create_snapshot "before-restore"
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    echo -e "\n${CYAN}‚Üí –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...${NC}"
    
    gunzip -c "$snapshot_file" | docker exec -i "${LOCAL_DB_CONTAINER}" \
        mysql \
        -u"${LOCAL_DB_USER}" \
        -p"${LOCAL_DB_PASS}" \
        "${LOCAL_DB_NAME}" \
        2>/dev/null
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞${NC}"
        
        # Flush cache –≤ WordPress (—á–µ—Ä–µ–∑ WP-CLI –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        echo -e "\n${CYAN}‚Üí –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ WordPress...${NC}"
        docker exec "${LOCAL_DB_CONTAINER}" \
            wp cache flush --path="${LOCAL_WP_PATH}" 2>/dev/null || true
        
        echo -e "${GREEN}‚úì –ì–æ—Ç–æ–≤–æ!${NC}"
        return 0
    else
        echo -e "${RED}‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ snapshot${NC}"
        return 1
    fi
}

# –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ snapshots –¥–ª—è –≤–µ—Ç–∫–∏
cleanup_old_snapshots() {
    local branch="$1"
    local normalized_branch=$(normalize_branch_name "$branch")
    
    # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ snapshots –¥–ª—è –≤–µ—Ç–∫–∏
    local snapshots=($(ls -t "${LOCAL_SNAPSHOT_DIR}/${normalized_branch}"_*.sql.gz 2>/dev/null))
    local count=${#snapshots[@]}
    
    if [ $count -gt $SNAPSHOT_KEEP_COUNT ]; then
        echo -e "\n${CYAN}‚Üí –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö snapshots (–æ—Å—Ç–∞–≤–ª—è—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${SNAPSHOT_KEEP_COUNT})...${NC}"
        
        for ((i=$SNAPSHOT_KEEP_COUNT; i<$count; i++)); do
            local file_to_remove="${snapshots[$i]}"
            local filename=$(basename "$file_to_remove")
            echo -e "   ${YELLOW}–£–¥–∞–ª—è—é:${NC} $filename"
            rm -f "$file_to_remove"
        done
    fi
}

# –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ä—ã–µ snapshots
cleanup_all_snapshots() {
    echo -e "${BLUE}üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö snapshots...${NC}\n"
    
    if [ ! -d "${LOCAL_SNAPSHOT_DIR}" ]; then
        echo -e "${YELLOW}–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è snapshots –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
        return 0
    fi
    
    # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–µ—Ç–æ–∫
    local branches=($(ls "${LOCAL_SNAPSHOT_DIR}"/*.sql.gz 2>/dev/null | xargs -n 1 basename | cut -d'_' -f1 | sort -u))
    
    for branch in "${branches[@]}"; do
        echo -e "${CYAN}‚Üí –û—á–∏—Å—Ç–∫–∞ snapshots –¥–ª—è –≤–µ—Ç–∫–∏: ${branch}${NC}"
        cleanup_old_snapshots "$branch"
    done
    
    echo -e "\n${GREEN}‚úì –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞${NC}"
}

# –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Git hook)
auto_save_current() {
    local current_branch=$(get_current_branch)
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)
    check_docker || return 0
    check_mysql_container || return 0
    
    echo -e "${BLUE}üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ë–î –¥–ª—è –≤–µ—Ç–∫–∏: ${GREEN}${current_branch}${NC}"
    create_snapshot "auto-save" > /dev/null 2>&1
}

# –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ç–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Git hook)
auto_restore_for_branch() {
    local target_branch="$1"
    
    if [ -z "$target_branch" ]; then
        target_branch=$(get_current_branch)
    fi
    
    check_docker || return 0
    check_mysql_container || return 0
    
    local normalized_branch=$(normalize_branch_name "$target_branch")
    local latest_snapshot=$(ls -t "${LOCAL_SNAPSHOT_DIR}/${normalized_branch}"_*.sql.gz 2>/dev/null | head -n 1)
    
    if [ -n "$latest_snapshot" ]; then
        echo -e "${BLUE}üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ë–î –¥–ª—è –≤–µ—Ç–∫–∏: ${GREEN}${target_branch}${NC}"
        
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏)
        gunzip -c "$latest_snapshot" | docker exec -i "${LOCAL_DB_CONTAINER}" \
            mysql \
            -u"${LOCAL_DB_USER}" \
            -p"${LOCAL_DB_PASS}" \
            "${LOCAL_DB_NAME}" \
            2>/dev/null
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}‚úì –ë–î –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ snapshot${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ—Ç snapshot –¥–ª—è –≤–µ—Ç–∫–∏ ${target_branch}${NC}"
        echo -e "   –û–ø—Ü–∏–∏:"
        echo -e "   1. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ë–î –æ—Ç main: ${CYAN}git checkout main && ./db-snapshot.sh create && git checkout ${target_branch} && ./db-snapshot.sh restore latest${NC}"
        echo -e "   2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç PROD: ${CYAN}./db-sync.sh pull prod${NC}"
    fi
}

# ============================================
# MAIN
# ============================================

COMMAND="${1:-}"

case "$COMMAND" in
    create)
        create_snapshot "$2"
        ;;
    list)
        list_snapshots
        ;;
    restore)
        restore_snapshot "$2"
        ;;
    cleanup)
        cleanup_all_snapshots
        ;;
    auto-save)
        auto_save_current
        ;;
    auto-restore)
        auto_restore_for_branch "$2"
        ;;
    help|--help|-h)
        show_usage
        ;;
    *)
        show_usage
        exit 1
        ;;
esac
