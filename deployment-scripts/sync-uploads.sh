#!/bin/bash
# üì§ Upload Synchronization Script
# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è wp-content/uploads –Ω–∞ —Å–µ—Ä–≤–µ—Ä
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç rsync –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä—ë–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö
#
# –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
# - –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ/–∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)
# - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ resume –ø—Ä–∏ –æ–±—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
# - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö/–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
# - –ó–∞—â–∏—Ç–∞ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
# - –û—Ç—á—ë—Ç—ã –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
# - Dry-run —Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
#
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   ./sync-uploads.sh [prod|dev] [--dry-run] [--delete]
#
# –û–ø—Ü–∏–∏:
#   --dry-run   –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏
#   --delete    –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)

set -e

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/config.sh"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–¥—É (prod –∏–ª–∏ dev)
ENVIRONMENT=""
DRY_RUN=false
DELETE_MODE=false
LONG_NAME_FILES=""
LONG_COUNT=0

# –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
for arg in "$@"; do
    case $arg in
        prod|dev)
            ENVIRONMENT="$arg"
            ;;
        --dry-run)
            DRY_RUN=true
            ;;
        --delete)
            DELETE_MODE=true
            ;;
        *)
            echo "Unknown argument: $arg"
            echo "Usage: $0 [prod|dev] [--dry-run] [--delete]"
            exit 1
            ;;
    esac
done

# –ï—Å–ª–∏ —Å—Ä–µ–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º
if [ -z "$ENVIRONMENT" ]; then
    echo -e "${YELLOW}Select environment:${NC}"
    echo "  1) dev"
    echo "  2) prod"
    read -p "Enter choice (1-2): " -r ENV_CHOICE
    
    case $ENV_CHOICE in
        1) ENVIRONMENT="dev" ;;
        2) ENVIRONMENT="prod" ;;
        *) echo "Invalid choice"; exit 1 ;;
    esac
fi

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–µ–¥—ã
if [ "$ENVIRONMENT" == "prod" ]; then
    SSH_USER="$PROD_SSH_USER"
    SSH_HOST="$PROD_SSH_HOST"
    WEBROOT="$PROD_WEBROOT"
elif [ "$ENVIRONMENT" == "dev" ]; then
    SSH_USER="$DEV_SSH_USER"
    SSH_HOST="$DEV_SSH_HOST"
    WEBROOT="$DEV_WEBROOT"
else
    echo -e "${RED}Invalid environment: $ENVIRONMENT${NC}"
    exit 1
fi

# Uppercase –¥–ª—è –≤—ã–≤–æ–¥–∞
ENV_UPPER=$(echo "$ENVIRONMENT" | tr '[:lower:]' '[:upper:]')

# ============================================
# HEADER
# ============================================
echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${CYAN}‚ïë         UPLOADS SYNC - ${ENV_UPPER}                       ‚ïë${NC}"
echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo ""

if [ "$DRY_RUN" = true ]; then
    echo -e "${YELLOW}üîç DRY RUN MODE - No files will be transferred${NC}"
    echo ""
fi

# ============================================
# STEP 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ============================================
echo -e "${BLUE}‚ïê‚ïê‚ïê STEP 1/4: Checking Local Environment ‚ïê‚ïê‚ïê${NC}"
echo ""

UPLOADS_DIR_LOCAL="${LOCAL_PROJECT_ROOT}/wordpress/wp-content/uploads"

if [ ! -d "${UPLOADS_DIR_LOCAL}" ]; then
    echo -e "${RED}‚úó Local uploads directory not found: ${UPLOADS_DIR_LOCAL}${NC}"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
UPLOADS_SIZE=$(du -sh "${UPLOADS_DIR_LOCAL}" | cut -f1)
FILE_COUNT=$(find "${UPLOADS_DIR_LOCAL}" -type f | wc -l | tr -d ' ')

echo "Local uploads directory:"
echo "  Path: ${UPLOADS_DIR_LOCAL}"
echo "  Size: ${UPLOADS_SIZE}"
echo "  Files: ${FILE_COUNT}"
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
LARGE_FILES=$(find "${UPLOADS_DIR_LOCAL}" -type f -size +50M | wc -l | tr -d ' ')
if [ ${LARGE_FILES} -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Found ${LARGE_FILES} files larger than 50MB${NC}"
    echo "Large files may take time to upload:"
    find "${UPLOADS_DIR_LOCAL}" -type f -size +50M -exec du -h {} \; | sort -rh | head -5 | while read size path; do
        echo "  ${size} - $(basename "$path")"
    done
    echo ""
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
echo "Checking for problematic filenames..."
PROBLEM_COUNT=0

# –§–∞–π–ª—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
SPACE_FILES=$(find "${UPLOADS_DIR_LOCAL}" -name "* *" -type f | wc -l | tr -d ' ')
if [ ${SPACE_FILES} -gt 0 ]; then
    echo -e "${YELLOW}  ‚ö† ${SPACE_FILES} files with spaces in names${NC}"
    PROBLEM_COUNT=$((PROBLEM_COUNT + SPACE_FILES))
fi

# –§–∞–π–ª—ã —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π/—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏
NON_ASCII=$(find "${UPLOADS_DIR_LOCAL}" -type f -exec sh -c 'basename "$1" | LC_ALL=C grep -q "[^[:print:]]"' _ {} \; -print | wc -l | tr -d ' ')
if [ ${NON_ASCII} -gt 0 ]; then
    echo -e "${YELLOW}  ‚ö† ${NON_ASCII} files with non-ASCII characters (cyrillic, etc)${NC}"
    PROBLEM_COUNT=$((PROBLEM_COUNT + NON_ASCII))
fi

# –§–∞–π–ª—ã —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ (>200 –ë–ê–ô–¢ –≤ basename)
# NAME_MAX –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ = 255 –±–∞–π—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º 200 –±–∞–π—Ç –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ—Ä–æ–≥
# –ö–∏—Ä–∏–ª–ª–∏—Ü–∞ –∑–∞–Ω–∏–º–∞–µ—Ç ~2 –±–∞–π—Ç–∞ –Ω–∞ —Å–∏–º–≤–æ–ª –≤ UTF-8
echo "  Checking for files with extremely long names..."
LONG_NAME_FILES=$(mktemp)

# –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ë–ê–ô–¢–´, –Ω–µ —Å–∏–º–≤–æ–ª—ã!)
UPLOADS_DIR_LOCAL="${UPLOADS_DIR_LOCAL}" python3 << 'PYSCRIPT' > "${LONG_NAME_FILES}"
import os
import sys

uploads_dir = os.environ.get('UPLOADS_DIR_LOCAL')
max_bytes = 200

for root, dirs, files in os.walk(uploads_dir):
    for fname in files:
        byte_len = len(fname.encode('utf-8'))
        if byte_len > max_bytes:
            full_path = os.path.join(root, fname)
            print(full_path)
PYSCRIPT

# –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
LONG_COUNT=$(cat "${LONG_NAME_FILES}" | wc -l | tr -d ' ')
LONG_COUNT=${LONG_COUNT:-0}

if [ ${LONG_COUNT} -gt 0 ]; then
    echo -e "${YELLOW}  ‚ö† ${LONG_COUNT} files with extremely long names (>200 bytes)${NC}"
    echo -e "${YELLOW}    These files will be SKIPPED during sync (filesystem limitation)${NC}"
    PROBLEM_COUNT=$((PROBLEM_COUNT + LONG_COUNT))
    
    if [ ${LONG_COUNT} -le 20 ]; then
        echo "    Files that will be skipped:"
        head -10 "${LONG_NAME_FILES}" | while IFS= read -r file; do
            filename=$(basename "$file")
            byte_len=$(printf "%s" "$filename" | wc -c | tr -d ' ')
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 80 —Å–∏–º–≤–æ–ª–æ–≤ –∏–º–µ–Ω–∏
            echo "      - ${filename:0:80}... [${byte_len} bytes]"
        done
    else
        echo "    Showing first 10 of ${LONG_COUNT} files:"
        head -10 "${LONG_NAME_FILES}" | while IFS= read -r file; do
            filename=$(basename "$file")
            byte_len=$(printf "%s" "$filename" | wc -c | tr -d ' ')
            echo "      - ${filename:0:80}... [${byte_len} bytes]"
        done
    fi
fi

if [ ${PROBLEM_COUNT} -gt 0 ]; then
    echo -e "${YELLOW}  Note: Files with long names will be skipped. You can re-upload them via WordPress admin.${NC}"
fi

echo -e "${GREEN}‚úì${NC} Local environment check passed"
echo ""

# ============================================
# STEP 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
# ============================================
echo -e "${BLUE}‚ïê‚ïê‚ïê STEP 2/4: Testing SSH Connection ‚ïê‚ïê‚ïê${NC}"
echo ""

if ! ssh -q -o BatchMode=yes -o ConnectTimeout=5 "${SSH_USER}@${SSH_HOST}" exit; then
    echo -e "${RED}‚úó Cannot connect to ${SSH_USER}@${SSH_HOST}${NC}"
    echo ""
    echo "Please check:"
    echo "  ‚Ä¢ SSH keys are configured"
    echo "  ‚Ä¢ Server is accessible"
    echo "  ‚Ä¢ Credentials in config.sh are correct"
    exit 1
fi

echo -e "${GREEN}‚úì${NC} SSH connection successful"
echo ""

# ============================================
# STEP 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
# ============================================
echo -e "${BLUE}‚ïê‚ïê‚ïê STEP 3/4: Preparing Remote Directory ‚ïê‚ïê‚ïê${NC}"
echo ""

# –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
ssh "${SSH_USER}@${SSH_HOST}" "mkdir -p '${WEBROOT}/wp-content/uploads'"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
echo "Checking remote uploads directory..."
REMOTE_INFO=$(ssh "${SSH_USER}@${SSH_HOST}" bash << ENDSSH
if [ -d "${WEBROOT}/wp-content/uploads" ]; then
    SIZE=\$(du -sh "${WEBROOT}/wp-content/uploads" 2>/dev/null | cut -f1)
    COUNT=\$(find "${WEBROOT}/wp-content/uploads" -type f 2>/dev/null | wc -l | tr -d ' ')
    echo "EXISTS|\${SIZE}|\${COUNT}"
else
    echo "EMPTY|0|0"
fi
ENDSSH
)

REMOTE_STATUS=$(echo "$REMOTE_INFO" | cut -d'|' -f1)
REMOTE_SIZE=$(echo "$REMOTE_INFO" | cut -d'|' -f2)
REMOTE_COUNT=$(echo "$REMOTE_INFO" | cut -d'|' -f3)

if [ "$REMOTE_STATUS" == "EXISTS" ]; then
    echo "Remote uploads directory:"
    echo "  Size: ${REMOTE_SIZE}"
    echo "  Files: ${REMOTE_COUNT}"
else
    echo "Remote uploads directory is empty (will be created)"
fi

echo -e "${GREEN}‚úì${NC} Remote directory ready"
echo ""

# ============================================
# STEP 4: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å rsync
# ============================================
echo -e "${BLUE}‚ïê‚ïê‚ïê STEP 4/4: Synchronizing Uploads ‚ïê‚ïê‚ïê${NC}"
echo ""

# –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π exclude —Ñ–∞–π–ª
EXCLUDE_FILE=$(mktemp /tmp/rsync_exclude_XXXXXX)
cat > "${EXCLUDE_FILE}" << 'EOF'
# macOS —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
.DS_Store
._*
__MACOSX/
.AppleDouble
.LSOverride
.Spotlight-V100
.Trashes

# Windows —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
Thumbs.db
desktop.ini
ehthumbs.db

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤
*~
*.swp
*.swo
*.tmp

# VCS
.git/
.gitignore

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
.cache/
.temp/
EOF

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –≤ exclude (–µ—Å–ª–∏ –µ—Å—Ç—å)
if [ -f "${LONG_NAME_FILES}" ] && [ ${LONG_COUNT} -gt 0 ]; then
    echo "Adding ${LONG_COUNT} long-named files to exclude list..."
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫ exclude —Ñ–∞–π–ª—É
    while IFS= read -r file; do
        if [ -n "$file" ]; then
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç UPLOADS_DIR_LOCAL
            rel_path="${file#${UPLOADS_DIR_LOCAL}/}"
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ exclude —Ñ–∞–π–ª —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            echo "$rel_path" >> "${EXCLUDE_FILE}"
        fi
    done < "${LONG_NAME_FILES}"
    
    echo "  Long-named files will be excluded from sync"
fi

# –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É rsync
RSYNC_OPTS=(
    -avz                          # archive, verbose, compress
    --progress                    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    --partial                     # —Ä–∞–∑—Ä–µ—à–∞–µ–º resume –ø—Ä–µ—Ä–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥–∞—á
    --partial-dir=.rsync-partial  # –ø–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    --exclude-from="${EXCLUDE_FILE}"
    --ignore-errors               # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
    --max-delete=100              # –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    --timeout=300                 # —Ç–∞–π–º–∞—É—Ç –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞ (5 –º–∏–Ω)
    --contimeout=60               # —Ç–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (60 —Å–µ–∫)
    -e "ssh -o ServerAliveInterval=30 -o ServerAliveCountMax=10"  # keep-alive
)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
if [ "$DRY_RUN" = true ]; then
    RSYNC_OPTS+=(--dry-run)
    RSYNC_OPTS+=(--itemize-changes)
fi

if [ "$DELETE_MODE" = true ]; then
    echo -e "${RED}‚ö†Ô∏è  DELETE MODE ENABLED${NC}"
    echo "Files on server that don't exist locally will be DELETED!"
    echo ""
    
    if [ "$DRY_RUN" != true ]; then
        read -p "Are you sure you want to continue? (type 'yes' to confirm): " -r CONFIRM
        if [[ ! $CONFIRM =~ ^[Yy][Ee][Ss]$ ]]; then
            echo "Sync cancelled"
            rm -f "${EXCLUDE_FILE}"
            exit 0
        fi
    fi
    
    RSYNC_OPTS+=(--delete)
    RSYNC_OPTS+=(--delete-excluded)
fi

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
echo "Sync configuration:"
echo "  Source: ${UPLOADS_DIR_LOCAL}/"
echo "  Target: ${SSH_USER}@${SSH_HOST}:${WEBROOT}/wp-content/uploads/"
echo "  Mode: $([ "$DRY_RUN" = true ] && echo "DRY RUN" || echo "LIVE SYNC")"
echo "  Delete: $([ "$DELETE_MODE" = true ] && echo "YES (files on server will be removed if not in source)" || echo "NO (files on server will be preserved)")"
echo ""

if [ "$DRY_RUN" != true ]; then
    echo "Starting synchronization..."
    echo "This may take several minutes depending on the size and number of files."
    echo ""
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º rsync
START_TIME=$(date +%s)
RSYNC_EXIT_CODE=0

rsync "${RSYNC_OPTS[@]}" \
    "${UPLOADS_DIR_LOCAL}/" \
    "${SSH_USER}@${SSH_HOST}:${WEBROOT}/wp-content/uploads/" || RSYNC_EXIT_CODE=$?

END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))

# –ö–æ–¥—ã –≤—ã—Ö–æ–¥–∞ rsync:
# 0 = —É—Å–ø–µ—Ö
# 23 = —á–∞—Å—Ç–∏—á–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–∞–π–ª—ã —Å–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏)
# 24 = —á–∞—Å—Ç–∏—á–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –∏–∑-–∑–∞ –ø—Ä–æ–ø–∞–≤—à–∏—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

if [ $RSYNC_EXIT_CODE -eq 0 ] || [ $RSYNC_EXIT_CODE -eq 23 ] || [ $RSYNC_EXIT_CODE -eq 24 ]; then
    echo ""
    if [ "$DRY_RUN" = true ]; then
        echo -e "${GREEN}‚úì${NC} Dry run completed in ${DURATION} seconds"
        
        if [ $RSYNC_EXIT_CODE -eq 23 ]; then
            echo -e "${YELLOW}  Note: Some files were skipped (likely due to long filenames)${NC}"
        fi
        
        echo ""
        echo "No files were actually transferred."
        echo "Run without --dry-run to perform the actual sync."
    else
        echo -e "${GREEN}‚úì${NC} Uploads synchronized in ${DURATION} seconds"
        
        if [ $RSYNC_EXIT_CODE -eq 23 ]; then
            echo -e "${YELLOW}  Note: Some files were skipped (likely due to long filenames)${NC}"
        fi
        
        echo ""
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        echo "Setting file permissions..."
        ssh "${SSH_USER}@${SSH_HOST}" "find '${WEBROOT}/wp-content/uploads' -type d -exec chmod 755 {} \; && find '${WEBROOT}/wp-content/uploads' -type f -exec chmod 644 {} \;" 2>/dev/null || true
        echo -e "${GREEN}‚úì${NC} Permissions set"
        echo ""
        
        echo "All uploads have been synced to the server."
    fi
else
    echo ""
    echo -e "${RED}‚úó Sync failed with exit code ${RSYNC_EXIT_CODE}${NC}"
    rm -f "${EXCLUDE_FILE}"
    rm -f "${LONG_NAME_FILES}"
    exit 1
fi

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
rm -f "${EXCLUDE_FILE}"
rm -f "${LONG_NAME_FILES}"

# ============================================
# SUMMARY
# ============================================
echo ""
echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${GREEN}‚úì${NC} Sync completed"
echo ""

# –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
if [ ${LONG_COUNT:-0} -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  NOTE: ${LONG_COUNT} files were skipped due to long filenames${NC}"
    echo ""
    echo "These files exceed filesystem name length limits (>200 bytes)."
    echo "Server NAME_MAX = 255 bytes. With UTF-8 cyrillic (~2 bytes/char),"
    echo "safe limit is ~100-120 characters for Russian filenames."
    echo ""
    echo "To fix this:"
    echo "  1. Re-upload the original images via WordPress admin"
    echo "  2. Or use a plugin to regenerate thumbnails (Regenerate Thumbnails)"
    echo "  3. WordPress will create new versions with shorter names"
    echo ""
fi

if [ "$DRY_RUN" != true ]; then
    echo "Next steps:"
    echo "  ‚Ä¢ Verify uploads on site: ${SITE_URL}"
    echo "  ‚Ä¢ Check image functionality"
    echo "  ‚Ä¢ Test media library in WordPress admin"
    echo ""
    echo "To sync again (only new/changed files will be transferred):"
    echo "  ./sync-uploads.sh ${ENVIRONMENT}"
fi

echo ""
